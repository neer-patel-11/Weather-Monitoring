<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Weather Monitoring with Alerts</title>
  <link rel="stylesheet" href="/css/styles.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> <!-- Include Chart.js -->
</head>
<body>
  <h1>Real-Time Weather Monitoring with Alerts</h1>

  <!-- Dropdown to select city -->
  <label for="city">Choose city:</label>
  <select id="city" onchange="fetchWeatherData(); updateChartData();" default="Delhi">
    <option value="Delhi" selected>Delhi</option>
    <option value="Mumbai">Mumbai</option>
    <option value="Chennai">Chennai</option>
    <option value="Bangalore">Bangalore</option>
    <option value="Kolkata">Kolkata</option>
    <option value="Hyderabad">Hyderabad</option>
  </select>

  <!-- Temperature unit switch -->
  <label for="unit">Choose temperature unit:</label>
  <select id="unit" onchange="switchUnit()">
    <option value="celsius" selected>Celsius</option>
    <option value="kelvin">Kelvin</option>
  </select>
  
  <!-- API call interval input -->
  <label for="interval">Set API call interval (minutes):</label>
  <input type="number" id="interval" value="1" min="1" onchange="setAPICallInterval()">

  <!-- Threshold Alert Configuration -->
  <h2>Set Alert Thresholds</h2>
  
  <label for="triggerMail">Trigger Mail</label>
  <input type="mail" id="triggerMail">

  <label for="threshold">Temperature Threshold (°C):</label>
  <input type="number" id="threshold" value="35">
  
  <label for="breachCount">Number of consecutive breaches:</label>
  <input type="number" id="breachCount" value="2" min="1">

  <!-- Weather Data Container -->
  <h2>Live Data</h2>

  <div class="weather-container">
    <div class="city" id="city-weather">
      <h2 id="city-name">City Name</h2>
      <p>Main Weather: <span id="main-weather"></span></p>
      <p>Temperature: <span id="temp" data-celsius="0"></span></p>
      <p>Feels Like: <span id="feels_like" data-celsius="0"></span></p>
      <p id="last-updated"></p>
    </div>
  </div>
  
  <h2>Daily Weather Summary</h2>
  <div class="summary-container">
    <div class="summary" id="city-summary">
      <h3 id="summary-city-name">City Summary</h3>
      <p>Average Temperature: <span id="avg-temp"></span></p>
      <p>MaxTemperature: <span id="max-temp"></span></p>
      <p>Min Temperature: <span id="min-temp"></span></p>
      <p>Dominant Weather: <span id="dominant-weather"></span></p>
    </div>
  </div>
  
    <!-- Chart Container -->
    <h2>Temperature Trends (Last 7 Days)</h2>
    <canvas id="weatherChart" width="600" height="400"></canvas> <!-- Chart.js canvas -->
  
  <script>
    let apiInterval;
    let breachCounter = 0;
    let weatherChart;  // Declare the Chart instance

    // Function to convert Celsius to Kelvin
    function convertToKelvin(tempCelsius) {
      return (parseFloat(tempCelsius) + 273.15).toFixed(2);
    }

    // Function to switch between Celsius and Kelvin
    function switchUnit() {
      const unit = document.getElementById('unit').value;
      const temp = document.getElementById('temp');
      const feelsLike = document.getElementById('feels_like');

      const tempCelsius = temp.dataset.celsius;
      temp.textContent = unit === 'kelvin' 
        ? convertToKelvin(tempCelsius) + ' K' 
        : tempCelsius + ' °C';

      const feelsLikeCelsius = feelsLike.dataset.celsius;
      feelsLike.textContent = unit === 'kelvin' 
        ? convertToKelvin(feelsLikeCelsius) + ' K' 
        : feelsLikeCelsius + ' °C';
    }

    // Function to fetch weather data for the selected city
    function fetchWeatherData() {
      const city = document.getElementById('city').value ;
      fetch(`/api/weather?city=${city}`)
        .then(response => response.json())
        .then(data => {
          if (data.weatherData && data.summaries) {
            const weather = data.weatherData[0];
            const summary = data.summaries[0];

            document.getElementById('city-name').textContent = weather.city;
            const tempElement = document.getElementById('temp');
            tempElement.dataset.celsius = weather.temp;
            tempElement.textContent = weather.temp + ' °C';

            document.getElementById('feels_like').dataset.celsius = weather.feels_like;
            document.getElementById('feels_like').textContent = weather.feels_like + ' °C';
            document.getElementById('last-updated').textContent = 'Last Updated: ' + new Date(weather.dt * 1000).toLocaleTimeString();

            // Update the summary
            document.getElementById('summary-city-name').textContent = summary.city + ' - ' + summary.date;
            document.getElementById('avg-temp').textContent = summary.avgTemp.toFixed(2) + ' °C';
            document.getElementById('max-temp').textContent = summary.maxTemp + ' °C';
            document.getElementById('min-temp').textContent = summary.minTemp + ' °C';
            document.getElementById('dominant-weather').textContent = summary.dominantWeather;

            checkForThresholdBreach(weather.temp);
          }
          switchUnit();
          updateChartData();
        })
        .catch(error => console.error('Error fetching weather data:', error));
    }

    // Function to fetch chart data
    function updateChartData() {
      const city = document.getElementById('city').value;
      fetch(`/api/chart-data?city=${city}`)
        .then(response => response.json())
        .then(data => {
          const chartData = data.chartData;

          // Extract the data
          const dates = chartData.map(entry => entry.date);
          const avgTemps = chartData.map(entry => entry.avgTemp);
          const maxTemps = chartData.map(entry => entry.maxTemp);
          const minTemps = chartData.map(entry => entry.minTemp);

          // Update the chart
          if (weatherChart) {
            weatherChart.destroy();  // Destroy the old chart before creating a new one
          }
          const ctx = document.getElementById('weatherChart').getContext('2d');
          weatherChart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: dates,
              datasets: [
                { label: 'Avg Temp (°C)', data: avgTemps, borderColor: 'blue', fill: false },
                { label: 'Max Temp (°C)', data: maxTemps, borderColor: 'red', fill: false },
                { label: 'Min Temp (°C)', data: minTemps, borderColor: 'green', fill: false }
              ]
            },
            options: {
              scales: {
                x: { title: { display: true, text: 'Date' } },
                y: { title: { display: true, text: 'Temperature (°C)' } }
              }
            }
          });
        })
        .catch(error => console.error('Error fetching chart data:', error));
    }

    // Initial data fetch
    fetchWeatherData();
    updateChartData();

    // Set API call interval (default 1 minute)
    function setAPICallInterval() {
      clearInterval(apiInterval);
      const interval = document.getElementById('interval').value || 1;
      apiInterval = setInterval(fetchWeatherData, interval * 60000);  // Convert minutes to milliseconds
    }

       // Function to trigger an alert API call
       function triggerAlert() {
      const city = document.getElementById('city').value;
      const threshold = document.getElementById('threshold').value;
      const triggerMail = document.getElementById('triggerMail').value
      fetch('/api/alert', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ city, threshold,triggerMail }),
      })
        .then(response => response.json())
        .then(data => {
          console.log('Alert sent:', data.message);
        })
        .catch(error => console.error('Error triggering alert:', error));
    }


    // Function to check if temperature exceeds the threshold
    function checkForThresholdBreach(temp) {
      const threshold = document.getElementById('threshold').value;
      const breachCount = document.getElementById('breachCount').value;

      if (temp > threshold) {
        breachCounter++;
      } else {
        breachCounter = 0;
      }

      if (breachCounter >= breachCount) {
        triggerAlert();
        alert('Threshold breach detected!');
        breachCounter = 0;  // Reset after alert
      }
    }
  </script>
</body>
</html>
